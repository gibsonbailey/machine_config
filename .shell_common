clear
printf "                    +      \n"
printf "\n\n" printf "                                        +            + \n"
printf "                _..._                           +                 \n"
printf "     +        .'     '.      _ \n"
printf "             /    .-\"\"-\\   _/ \\                            \n"
printf "           .-|   /:.   |  |   | \n"
printf "           |  \\  |:.   /.-'-./             + \n"
printf "           | .-'-;:__.'    =/ \n"
printf "           .'=  *=|NASA _.='            Welcome back, Bailey! \n"
printf "          /   _.  |    ;                  Do good work, son! \n"
printf "         ;-.-'|    \\   | \n"
printf "        /   | \\    _\\  _\\                                            + \n"
printf "        \\__/'._;.  ==' ==\\ \n"
printf "                 \\    \\   | \n"
printf "                 /    /   / \n"
printf "        +        /-._/-._/                 + \n"
printf "                 \\   \`\\  \\ \n"
printf "                  \`-._/._/                    +                           \n"
printf "\n\n"

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

public_ip() {
    curl ipecho.net/plain ; echo
}

local_ip() {
    ifconfig en0 | grep broadcast | awk '{print $2}'
}

fc() {
# Go to a directory in my source code dir.
  DIR=$(find ~/src -maxdepth 1 -type d -exec stat -f "%m %N" {} \; | sort -k 1 -rn | awk '{print $2}' | fzf)
  if [ -n "$DIR" ]; then
    cd $DIR
  fi
}

vc() {
# Open source code dir with nvim.
    DIR="$(find ~/src -maxdepth 1 -type d -exec stat -f "%m %N" {} \; | sort -k 1 -rn | awk '{print $2}' | fzf)"
    if [ -n "$DIR" ]; then
        nvim $DIR
    fi
}

gai() {
  ~/machine_config/scripts/gai.sh
}

# Reminder:
# Reverse ssh tunnel port forwarding:
# Use `ngrok` command

uip() {
    if [ $# -gt 1 ]
      then
        echo "Error: too many arguments.
uip is a function built to replace the SITE_DOMAIN variable in your .env file to use your current local ip.
Usage:
uip <file_name>
(file_name is optional)."
        return 1
    fi
    FILE=".env"
    if [ $# -gt 0 ]
      then
        FILE=$1
    fi

    IN_GIT_DIRECTORY="$(git rev-parse --is-inside-work-tree)"
    
    if [[ -z $IN_GIT_DIRECTORY ]]
    then
        echo 'uip: This command only works inside git repositories.'
    else
        REPO_PATH="$(git rev-parse --show-toplevel)"
        echo $REPO_PATH
    fi

    FILE=$REPO_PATH/$FILE

    IP="$(local_ip)"

    echo "Replacing active SITE_DOMAIN var in $FILE with new ip: $IP"

    REGEX="s|(^SITE_DOMAIN.*)|SITE_DOMAIN=http://$IP:8000|"
    sed -i '' -E $REGEX $FILE
}

# Pulls aws bucket down to local
# below replace <aws key>, <aws secret>, and <cloudcube bucket name>
# AWS_ACCESS_KEY_ID=<aws key> AWS_SECRET_ACCESS_KEY=<aws secret> aws s3 sync s3://cloud-cube-us2/<cloudcube bucket name> .


bindkey "\e\e[D" backward-word
bindkey "\e\e[C" forward-word

export PATH="/usr/local/Cellar:$PATH"

alias vim="nvim"
alias ll="ls -al"
alias python="python3"
alias gc="git commit -m"
alias gs="git status"
alias ga="git add ."
alias gd="git diff"
alias gdc="git diff --cached"
alias graph="git log --graph --abbrev-commit --decorate --format=format:'%C(bold yellow)%h%C(reset) - %C(green)(%ar)%C(reset)%C(bold white) %s%C(reset) %C(dim     white)- %an%C(reset)%C(auto)%d%C(reset)' --all"
alias push="git push"
alias pull="git pull"
alias gch="git checkout"

gpu() {
    git push --set-upstream origin $(git branch --show-current)
}

alias up="docker-compose up -d"
alias down="docker-compose down"
alias dc="docker-compose"
alias ded="docker exec -it django /bin/bash"
alias dld="docker logs -f django"
alias runlocal="python manage_dev.py runserver 0.0.0.0:3333"
alias dsp="python manage_dev.py shell_plus"
alias logs="dc logs -f"

b() {
    dc exec $1 bash
}

manage() {
    dc exec django python manage.py "${@:1}"
}

sp() {
    dc exec django python manage.py shell_plus
}



# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/gibsonbailey/Downloads/google-cloud-sdk/path.bash.inc' ]; then . '/Users/gibsonbailey/Downloads/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/gibsonbailey/Downloads/google-cloud-sdk/completion.bash.inc' ]; then . '/Users/gibsonbailey/Downloads/google-cloud-sdk/completion.bash.inc'; fi
alias graph="git lg"
alias graphold="git log --decorate --graph --all --oneline"
alias runsim="docker-compose exec simulator python minimal_gui.py"
alias viewsim="open vnc://0.0.0.0:5900"

export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
export FZF_DEFAULT_COMMAND='rg --hidden -l ""'
alias f="fzf --preview 'bat --style=numbers --color=always {} | head -500'"


export N_PREFIX=$HOME/.n
export PATH="$N_PREFIX/bin:$PATH"
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$ANDROID_HOME/platform-tools:$PATH
export PATH=$HOME/bin:$PATH
